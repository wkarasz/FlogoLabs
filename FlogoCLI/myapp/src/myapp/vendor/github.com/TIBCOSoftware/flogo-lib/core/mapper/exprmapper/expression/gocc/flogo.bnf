/*
    This file use to describe all function and expression that support in Flogo.
    BNF standard expression

    Author: Tracy Li
 */

!whitespace : ' ' | '\t' | '\n' | '\r' ;

_digit : '0'-'9' ;

_number : _digit {_digit} ;

_float_exp  : ( 'e' | 'E' ) [ '+' | '-' ] _number ;

_float_lit : ( _number '.' _number _float_exp )
   | ( _number '.' ( _number | _float_exp ) )
   | ( '.' ( _number | _float_exp ) )
   | ( _number _float_exp )
   ;

float : (_float_lit);
number : (_number);
_function_name:  'a'-'z' | 'A'-'Z' | '0'-'9' | '.' | '_';

_refbracket : '[' {.} ']';
_ref : 'a'-'z' | 'A'-'Z' | '.' | '0'-'9' | '-' | '[' | ']' | '_' | ' ' | '$' | '{' | '}' | _refbracket;
_flogostring : {_ref};

//Static function name, such as concat, substring, len etc...
function_name : {_function_name} ;
_quotedpair : '\\' . ;

//Double quotes strings
doublequotes_string : '"' {_quotedpair | .} '"';
singlequote_string : '\'' {_quotedpair |.} '\'' ;
//Flogo Ref string, such as" $A3.Input.Query.Result
argument : '$' _flogostring ;


<< import "github.com/TIBCOSoftware/flogo-lib/core/mapper/exprmapper/expression/direction" >>


/*

    Describe Flogo function rules.
    Example:
        1. concat("This","is",concat("my","first"),"gocc",concat("lexer","and","parser"),concat("go","program","!!!"))
           Result:Thisismyfirstgocclexerandparsergoprogram!!!
        2. concat("Beijing",String(number(Len("lixingwang"))))
           Result: Beijing10
 */

Flogo
    : Expr
    | TernaryExpr
    ;

Expr
    : OrExpr
  ;
OrExpr
    : OrExpr "||" AndExpr                                        <<direction.NewExpression($0, $1, $2) >>
    | AndExpr
    ;
AndExpr
    : AndExpr "&&" ConditionalExpr                               <<direction.NewExpression($0, $1, $2) >>
    | ConditionalExpr
    ;
ConditionalExpr
    : ConditionalExpr RelOp AddExpr                              <<direction.NewExpression($0, $1, $2) >>
    | AddExpr
    ;
AddExpr
    : AddExpr AddOp MulExpr                                      <<direction.NewExpression($0, $1, $2) >>
    | MulExpr
    ;
MulExpr
    : MulExpr MulOp ParenthesesExpr                              <<direction.NewExpression($0, $1, $2) >>
    | ParenthesesExpr
    ;
ParenthesesExpr
    : ExprLiteral
    | "(" Expr ")"                                               <<direction.NewExpressionField($1)>>
    ;

RelOp : "==" | "!=" | "<" | "<=" | ">" | ">=";
AddOp : "+" | "-";
MulOp : "*" | "/" | "%";


Func
   : function_name "(" ArgsList ")"             << direction.NewFunction($0, $2) >>
   | function_name "()"                         << direction.NewFunction($0, "") >>
   ;

ArgsList
   : ExprLiteral                                <<direction.NewArgument($0)>>
   | ArgsList "," ArgsList                      <<direction.NewArguments($0, $2)>>
    ;

TernaryExpr
    : TernaryArgument "?" TernaryArgument ":" TernaryArgument                    <<direction.NewTernaryExpression($0, $2, $4)>>
    ;

TernaryArgument
     :  Expr
     |  TernaryExpr                              <<direction.NewTernaryArgument($0)>>
     | "(" TernaryExpr ")"                       <<direction.NewTernaryArgument($1)>>
     ;

ExprLiteral
    : Literal                                    <<direction.NewLiteralExpr($0)>>
    | Func
    ;

Literal
     : Int                          <<direction.NewIntLit($0)>>
     | Float                        <<direction.NewFloatLit($0)>>
     | NegativeLiteral
     | Bool                         <<direction.NewBool($0)>>
     | DoubleQString                <<direction.NewDoubleQuoteStringLit($0)>>
     | SingleQString                <<direction.NewSingleQuoteStringLit($0)>>
     | MappingRef                   <<direction.NewMappingRef($0)>>
     | Nil                          <<direction.NewNilLit($0)>>
     ;

NegativeLiteral
    : "-"Int                          <<direction.NewNagtiveIntLit($1)>>
    | "-"Float                        <<direction.NewNagtiveFloatLit($1)>>
    ;

DoubleQString
    : doublequotes_string
    ;
SingleQString
    : singlequote_string
    ;
Int
    : number
    ;
MappingRef
    : argument
    ;
Bool
    : "true"
    | "false"
    ;
Float
    : float
    ;
Nil
    : "nil"
    | "null"
    ;